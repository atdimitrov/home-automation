@page "/lighting"
@inject HttpClient http
@inject LocalDateTimeConverter converter
@using HomeAutomation.Shared

<h1>Lighting</h1>

@if (this.loaded)
{
    <div style="margin: 10px">
        <p>Lighting is @this.state</p>
    </div>

    <div style="margin: 10px">
        <p>Next lighting state change: @this.upcomingStateChanges.FirstChange.NewState
            at @this.converter.ConvertToLocalDateTime(this.upcomingStateChanges.FirstChange.Timestamp)</p>

        <p>Next solar event: @this.upcomingStateChanges.FirstChange.SolarEvent.Type
            at @this.converter.ConvertToLocalDateTime(this.upcomingStateChanges.FirstChange.SolarEvent.Timestamp)</p>
    </div>

    <div style="margin: 10px">
        <p>Next next lighting state change: @this.upcomingStateChanges.SecondChange.NewState at
            @this.converter.ConvertToLocalDateTime(this.upcomingStateChanges.SecondChange.Timestamp)</p>

        <p>Next next solar event: @this.upcomingStateChanges.SecondChange.SolarEvent.Type at
            @this.converter.ConvertToLocalDateTime(this.upcomingStateChanges.SecondChange.SolarEvent.Timestamp)</p>
    </div>
}
else
{
<p>Loading...</p>
}

@code {
    private State state;
    private UpcomingLightingStateChanges upcomingStateChanges;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await this.converter.Initialize();
        this.state = await this.http.GetFromJsonAsync<State>("/api/lighting/getState");
        this.upcomingStateChanges = await this.http.GetFromJsonAsync<UpcomingLightingStateChanges>("/api/lighting/getUpcomingStateChanges");
        this.loaded = true;
    }
}
